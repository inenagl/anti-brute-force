// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: anti-brute-force.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AntiBruteForce_Auth_FullMethodName                = "/anti_brute_force.AntiBruteForce/Auth"
	AntiBruteForce_Reset_FullMethodName               = "/anti_brute_force.AntiBruteForce/Reset"
	AntiBruteForce_AddToBlackList_FullMethodName      = "/anti_brute_force.AntiBruteForce/AddToBlackList"
	AntiBruteForce_AddToWhiteList_FullMethodName      = "/anti_brute_force.AntiBruteForce/AddToWhiteList"
	AntiBruteForce_RemoveFromBlackList_FullMethodName = "/anti_brute_force.AntiBruteForce/RemoveFromBlackList"
	AntiBruteForce_RemoveFromWhiteList_FullMethodName = "/anti_brute_force.AntiBruteForce/RemoveFromWhiteList"
)

// AntiBruteForceClient is the client API for AntiBruteForce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddToBlackList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddToWhiteList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveFromBlackList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	RemoveFromWhiteList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type antiBruteForceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceClient(cc grpc.ClientConnInterface) AntiBruteForceClient {
	return &antiBruteForceClient{cc}
}

func (c *antiBruteForceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddToBlackList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_AddToBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddToWhiteList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_AddToWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) RemoveFromBlackList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_RemoveFromBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) RemoveFromWhiteList(ctx context.Context, in *IpNetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_RemoveFromWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServer is the server API for AntiBruteForce service.
// All implementations must embed UnimplementedAntiBruteForceServer
// for forward compatibility
type AntiBruteForceServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	Reset(context.Context, *ResetRequest) (*EmptyResponse, error)
	AddToBlackList(context.Context, *IpNetRequest) (*EmptyResponse, error)
	AddToWhiteList(context.Context, *IpNetRequest) (*EmptyResponse, error)
	RemoveFromBlackList(context.Context, *IpNetRequest) (*EmptyResponse, error)
	RemoveFromWhiteList(context.Context, *IpNetRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedAntiBruteForceServer()
}

// UnimplementedAntiBruteForceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServer struct {
}

func (UnimplementedAntiBruteForceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAntiBruteForceServer) Reset(context.Context, *ResetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedAntiBruteForceServer) AddToBlackList(context.Context, *IpNetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlackList not implemented")
}
func (UnimplementedAntiBruteForceServer) AddToWhiteList(context.Context, *IpNetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServer) RemoveFromBlackList(context.Context, *IpNetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlackList not implemented")
}
func (UnimplementedAntiBruteForceServer) RemoveFromWhiteList(context.Context, *IpNetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhiteList not implemented")
}
func (UnimplementedAntiBruteForceServer) mustEmbedUnimplementedAntiBruteForceServer() {}

// UnsafeAntiBruteForceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServer interface {
	mustEmbedUnimplementedAntiBruteForceServer()
}

func RegisterAntiBruteForceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServer) {
	s.RegisterService(&AntiBruteForce_ServiceDesc, srv)
}

func _AntiBruteForce_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddToBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddToBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_AddToBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddToBlackList(ctx, req.(*IpNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddToWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddToWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_AddToWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddToWhiteList(ctx, req.(*IpNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_RemoveFromBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).RemoveFromBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_RemoveFromBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).RemoveFromBlackList(ctx, req.(*IpNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_RemoveFromWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpNetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).RemoveFromWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_RemoveFromWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).RemoveFromWhiteList(ctx, req.(*IpNetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForce_ServiceDesc is the grpc.ServiceDesc for AntiBruteForce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anti_brute_force.AntiBruteForce",
	HandlerType: (*AntiBruteForceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AntiBruteForce_Auth_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _AntiBruteForce_Reset_Handler,
		},
		{
			MethodName: "AddToBlackList",
			Handler:    _AntiBruteForce_AddToBlackList_Handler,
		},
		{
			MethodName: "AddToWhiteList",
			Handler:    _AntiBruteForce_AddToWhiteList_Handler,
		},
		{
			MethodName: "RemoveFromBlackList",
			Handler:    _AntiBruteForce_RemoveFromBlackList_Handler,
		},
		{
			MethodName: "RemoveFromWhiteList",
			Handler:    _AntiBruteForce_RemoveFromWhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anti-brute-force.proto",
}
